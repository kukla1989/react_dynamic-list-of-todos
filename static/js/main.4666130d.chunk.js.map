{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","choosenId","handleChooseTodoEye","className","map","todo","id","completed","title","isChoosen","classNames","type","onClick","TodoFilter","handleCompletedFilter","handleSearchQuery","query","onChange","event","target","value","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","handleCloseChoosenTodo","useState","user","setUser","useEffect","userId","findedUser","href","email","name","App","setTodos","completedFilter","setCompletedFilter","setQuery","currentTodo","setCurrentTodo","visibleTodos","filter","toLowerCase","includes","complete","newQuery","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4666130d.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface P {\n  todos: Todo[];\n  choosenId: number | null;\n  handleChooseTodoEye: (todo: Todo)=> void;\n}\n\nexport const TodoList: React.FC<P> = ({\n  todos,\n  choosenId,\n  handleChooseTodoEye,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => {\n        const { id, completed, title } = todo;\n        const isChoosen = (id === choosenId);\n\n        return (\n          <tr\n            data-cy=\"todo\"\n            className={classNames({ 'has-background-info-light': isChoosen })}\n            key={id}\n          >\n            <td className=\"is-vcentered\">{id}</td>\n\n            {completed\n              ? (\n                <td className=\"is-vcentered\">\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </td>\n              )\n              : <td className=\"is-vcentered\" />}\n\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={`has-text-${completed ? 'success' : 'danger'}`}\n              >\n                {title}\n              </p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => handleChooseTodoEye(todo)}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={`far ${isChoosen ? 'fa-eye-slash' : 'fa-eye'}`}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import { CompletedFilter } from '../../types/CompletedFilter';\n\ninterface P {\n  handleCompletedFilter: (complete: CompletedFilter)=> void;\n  handleSearchQuery: (newQuery: string)=> void;\n  query: string;\n}\n\nexport const TodoFilter: React.FC<P> = ({\n  handleCompletedFilter,\n  handleSearchQuery,\n  query,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          onChange={(event) => (\n            handleCompletedFilter(event.target.value as CompletedFilter))}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => handleSearchQuery(event.target.value)}\n      />\n\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => handleSearchQuery('')}\n          />\n        </span>\n      )}\n\n    </p>\n  </form>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ninterface P {\n  todo: Todo;\n  handleCloseChoosenTodo: () => void;\n}\n\nexport const TodoModal: React.FC<P> = ({ todo, handleCloseChoosenTodo }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(todo.userId)\n      .then(findedUser => {\n        setUser(findedUser);\n      });\n  }, []);\n  const { id, title, completed } = todo;\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => handleCloseChoosenTodo()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {\n                completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>\n              }\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { CompletedFilter } from './types/CompletedFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [completedFilter, setCompletedFilter] = useState<CompletedFilter>('all');\n  const [query, setQuery] = useState('');\n  const [currentTodo, setCurrentTodo] = useState<Todo | null>(null);\n\n  useEffect(() => {\n    getTodos().then(setTodos);\n  }, []);\n\n  const handleCompletedFilter = (complete: CompletedFilter): void => {\n    setCompletedFilter(complete);\n  };\n\n  const handleSearchQuery = (newQuery: string): void => {\n    setQuery(newQuery);\n  };\n\n  const handleChooseTodoEye = (todo: Todo): void => {\n    setCurrentTodo(todo);\n  };\n\n  const handleCloseChoosenTodo = () => {\n    setCurrentTodo(null);\n  };\n\n  const visibleTodos = todos.filter(todo => {\n    if (!todo.title.toLowerCase().includes(query.toLowerCase())) {\n      return false;\n    }\n\n    switch (completedFilter) {\n      case 'completed':\n        return todo.completed;\n\n      case 'active':\n        return !todo.completed;\n\n      default:\n        return true;\n    }\n  });\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                handleCompletedFilter={handleCompletedFilter}\n                handleSearchQuery={handleSearchQuery}\n                query={query}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todos.length === 0\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    choosenId={currentTodo?.id || null}\n                    handleChooseTodoEye={handleChooseTodoEye}\n                  />\n                )}\n\n            </div>\n          </div>\n        </div>\n      </div>\n      {currentTodo && (\n        <TodoModal\n          handleCloseChoosenTodo={handleCloseChoosenTodo}\n          todo={currentTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}